version: '3.8'
services:
  # mongodb:
  #   build: 
  #     dockerfile: Dockerfile
  #     context: ./data-persistence/mongodb
  # server:
  #   build:
  #     dockerfile: Dockerfile.dev
  #     context: ./microservices/user-service
  #   ports:
  #     - '6008:6008'
  #   depends_on:
  #     - mongodb
  #   volumes:
  #     - /app/node_modules
  #     - ./microservices/user-service:/app
  rabbitmq:
    image: rabbitmq:3.8
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      retries: 5
    restart: unless-stopped
    # entrypoint: >
    #   bash -c "rabbitmq-plugins enable rabbitmq_management && rabbitmq-plugins enable rabbitmq_prometheus && rabbitmq-server"
  # shared:
  #   build: 
  #     context: ./shared
  #     dockerfile: dockerFile.dev
  #   healthcheck:
  #     test: ["CMD-SHELL", "sleep 1"]
  nginx:
    depends_on:
      - customer
      - product
      - supplier
    restart: always
    build:
      context: ./microservices/api-proxy-server
      dockerfile: dockerFile.dev
    ports:
      - '4000:80'
  customer:
    depends_on:
      rabbitmq:
        condition: service_healthy
      # shared:
      #   condition: service_healthy
    container_name: customer
    restart: always
    build:
      context: ./microservices/customer-service
      dockerfile: dockerFile.dev
    volumes:
      - /app/node_modules
      - ./microservices/customer-service:/app
  supplier:
    depends_on:
      rabbitmq:
        condition: service_healthy
      # shared:
      #   condition: service_healthy
    container_name: supplier
    restart: always
    build:
      context: ./microservices/supplier-service
      dockerfile: dockerFile.dev
    volumes:
      - /app/node_modules
      - ./microservices/supplier-service:/app  
  product:
    depends_on:
      - rabbitmq
    container_name: product
    restart: always
    build:
      context: ./microservices/product-service
      dockerfile: dockerFile.dev
    volumes:
      - /app/node_modules
      - ./microservices/product-service:/app
  keycloak:
    container_name: keycloak
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: ./microservices/rbac-service
      dockerfile: dockerFile.dev
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
